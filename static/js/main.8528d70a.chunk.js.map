{"version":3,"sources":["App.js","data.js","serviceWorker.js","index.js"],"names":["options","title","dimensions","datatable","width","height","marginTop","row","keyColumn","font","data","columns","id","label","colSize","editable","dataType","inputType","dateFormat","rows","name","lastname","email","phonenumber","birthDate","company","features","canEdit","canDelete","canPrint","canDownload","canSearch","canRefreshRows","canOrderColumns","canSelectRow","canSaveUserConfiguration","userConfiguration","columnsOrder","copyToClipboard","rowsPerPage","available","selected","additionalIcons","icon","color","onClick","alert","selectionIcons","console","log","App","className","refreshRows","randomRows","Math","floor","random","length","randomTime","randomResolve","Promise","resolve","reject","setTimeout","chunk","Error","actions","type","payload","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.8528d70a.chunk.js","sourcesContent":["// ES6\nimport React from \"react\";\nimport { Datatable } from \"@o2xp/react-datatable\";\nimport {\n  FreeBreakfast as CoffeeIcon,\n  CallSplit as CallSplitIcon\n} from \"@material-ui/icons\";\nimport { chunk } from \"lodash\";\nimport { data } from './data'\n\nlet columns = data.columns\nlet rows = data.rows\n\nconst options = {\n  title: \"My datatable\",\n  dimensions: {\n    datatable: {\n      width: \"90%\",\n      height: \"80vh\",\n      marginTop: \"2em\"\n    },\n    row: {\n      height: \"60px\"\n    }\n  },\n  keyColumn: \"id\",\n  font: \"Verdana\",\n  data: { columns, rows },\n  features: {\n    canEdit: true,\n    canDelete: true,\n    canPrint: true,\n    canDownload: true,\n    canSearch: true,\n    canRefreshRows: true,\n    canOrderColumns: true,\n    canSelectRow: true,\n    canSaveUserConfiguration: true,\n    userConfiguration: {\n      columnsOrder: [\"name\", \"lastname\", \"email\", \"phonenumber\", \"birthDate\", \"company\"],\n      copyToClipboard: true\n    },\n    rowsPerPage: {\n      available: [10, 25, 50, 100],\n      selected: 50\n    },\n    additionalIcons: [\n      {\n        title: \"Coffee\",\n        icon: <CoffeeIcon color=\"primary\" />,\n        onClick: () => alert(\"Coffee Time!\")\n      }\n    ],\n    selectionIcons: [\n      {\n        title: \"Selected Rows\",\n        icon: <CallSplitIcon color=\"primary\" />,\n        onClick: rows => console.log(rows)\n      }\n    ]\n  }\n};\n\n\nfunction App() {\n\n  const actionsRow = ({ type, payload }) => {\n    console.log(type);\n    console.log(payload);\n  };\n\n  const refreshRows = () => {\n    const { rows } = options.data;\n    const randomRows = Math.floor(Math.random() * rows.length) + 1;\n    const randomTime = Math.floor(Math.random() * 4000) + 1000;\n    const randomResolve = Math.floor(Math.random() * 10) + 1;\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        if (randomResolve > 3) {\n          resolve(chunk(rows, randomRows)[0]);\n        }\n        reject(new Error(\"err\"));\n      }, randomTime);\n    });\n  };\n\n  return (\n    <div className=\"App\">\n      <Datatable options={options}\n        refreshRows={refreshRows}\n        actions={actionsRow} />\n    </div>\n  );\n}\n\nexport default App;\n","\r\nexport const data = {\r\n    columns: [\r\n      {\r\n        id: \"name\",\r\n        label: \"Name\",\r\n        colSize: \"60px\",\r\n        editable: true,\r\n        dataType: \"text\",\r\n        inputType: \"input\"\r\n      },\r\n      {\r\n        id: \"lastname\",\r\n        label: \"Lastname\",\r\n        colSize: \"80px\",\r\n        editable: true,\r\n        dataType: \"text\",\r\n        inputType: \"input\"\r\n      },\r\n      {\r\n        id: \"email\",\r\n        label: \"Email\",\r\n        colSize: \"90px\",\r\n        editable: true,\r\n        dataType: \"text\",\r\n        inputType: \"input\"\r\n      },\r\n      {\r\n        id: \"phonenumber\",\r\n        label: \"Phone\",\r\n        colSize: \"90px\",\r\n        editable: true,\r\n        dataType: \"number\",\r\n        inputType: \"input\"\r\n      },\r\n      {\r\n        id: \"birthDate\",\r\n        label: \"birth date\",\r\n        colSize: \"80px\",\r\n        editable: true,\r\n        dataType: \"date\",\r\n        inputType: \"datePicker\",\r\n        dateFormat: \"YYYY-MM-DDTHH:MM:ss\"\r\n      },\r\n      {\r\n        id: \"company\",\r\n        label: \"company\",\r\n        colSize: \"40px\",\r\n        editable: true,\r\n        inputType: \"input\",\r\n        dataType: \"number\",\r\n      },\r\n    ],\r\n    rows: [\r\n      {\r\n        id: \"50cf\",\r\n        name: \"Виктор\",\r\n        lastname: \"Петров\",\r\n        email: \"test@test.com\",\r\n        phonenumber: \"77777777777\",\r\n        birthDate: \"1981-03-03T11:09:59\",\r\n        company: \"Company 1\"\r\n      },\r\n      {\r\n        id: \"209\",\r\n        name: \"Вася\",\r\n        lastname: \"Пупкин\",\r\n        email: \"test@test.com\",\r\n        phonenumber: \"333333333333\",\r\n        birthDate: \"2004-10-20T11:09:59\",\r\n        company: \"Company 2\"\r\n      },\r\n      {\r\n        id: \"2dd81ef\",\r\n        name: \"Дима\",\r\n        lastname: \"Коршунов\",\r\n        email: \"test@test.com\",\r\n        phonenumber: \"22222222222\",\r\n        birthDate: \"1991-07-16T11:09:59\",\r\n        company: \"Company 3\"\r\n      },\r\n      {\r\n        id: \"2sdf456\",\r\n        name: \"Сан\",\r\n        lastname: \"Саныч\",\r\n        email: \"test@test.com\",\r\n        phonenumber: \"33333333333\",\r\n        birthDate: \"1998-07-03T11:09:59\",\r\n        company: \"Company 4\"\r\n      },\r\n\r\n    ]\r\n  }","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}